import asyncio
from SPyderSQL import SecurityAsyncSQLite
from SPyderSQL import sanitize_table_name
from SPyderSQL import sanitize_column_names

SQLite = SecurityAsyncSQLite

async def main():

    db = SQLite("database.db")
    await db.connect()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
    await db.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)")

    # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await db.execute("INSERT INTO users (name) VALUES (?)", ("Alice",))
    await db.execute_many("INSERT INTO users (name) VALUES (?)", [("Bob",), ("Charlie",)])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    user = await db.fetchone("SELECT * FROM users WHERE name = ?", ("Alice",))
    print(dict(user))  # {'id': 1, 'name': 'Alice'}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (‚ö†Ô∏è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ—á–µ–Ω—å –º–Ω–æ–≥–æ!)
    all_users = await db.fetchall("SELECT * FROM users")
    print([dict(u) for u in all_users])

    # –ü–æ—Ç–æ–∫–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏)
    async for user in db.fetch_stream("SELECT * FROM users"):
        print(dict(user))  # –í—ã–≤–µ–¥–µ—Ç –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞ —Ä–∞–∑

    await db.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è



asyncio.run(main())



async def employer_exemple():

    db = SQLite("company.db")
    await db.connect()


    # ‚úÖ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤

    name_table = sanitize_table_name('employees')

    created_column_names = (
        'name TEXT NOT NULL,'
        'age INTEGER,'
        'department TEXT,'
        'salary REAL,'
        'hire_date TEXT DEFAULT CURRENT_TIMESTAMP'
    )

    await db.execute(f"""
        CREATE TABLE IF NOT EXISTS {name_table} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            {created_column_names}
        )
    """)

    await db.close()


    # ‚úÖ –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É?
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ execute():

    name_table = sanitize_table_name('employees')

    column_names = sanitize_column_names(['name, age, department, salary'])
    values = ("Alice", 30, "Engineering", 75000.50)

    placeholders = ", ".join(["?" for _ in column_names])

    await db.execute(f"""
        INSERT INTO {name_table} ({", ".join(column_names)})
        VALUES ({placeholders})
    """, values)

    await db.close()


    # ‚úÖ –ö–∞–∫ –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ä–∞–∑—É –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫? (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
    # –ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å—Ä–∞–∑—É, –∏—Å–ø–æ–ª—å–∑—É–π execute_many():

    name_table = sanitize_table_name('employees')

    column_names = sanitize_column_names(['name, age, department, salary'])

    values_employees = [
        ("Bob", 28, "HR", 50000),
        ("Charlie", 35, "Marketing", 62000),
        ("Diana", 40, "Finance", 90000),
    ]

    placeholders = ", ".join(["?" for _ in column_names])

    await db.execute_many(f"""
            INSERT INTO {name_table} ({", ".join(column_names)})
            VALUES ({placeholders})
        """, values_employees)

    await db.close()


    # ‚úÖ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã?
    # üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:

    name_table = sanitize_table_name('employees')

    employees = await db.fetchall(f"SELECT * FROM {name_table}")

    await db.close()
    all_employees = [dict(emp) for emp in employees]

    print(all_employees)

    await db.close()


    # ‚úÖ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã?
    # üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:

    name_table = sanitize_table_name('employees')

    alone_where = ('Alice', )

    employee = await db.fetchone(f"SELECT * FROM {name_table} WHERE name = ?", alone_where)

    await db.close()
    employee_by_name = dict(employee) if employee else None

    print(employee_by_name)

    await db.close()


    # ‚úÖ –ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ?

    name_table = sanitize_table_name('employees')

    columns_to_update = ["salary"]
    update_values = (80000, 1)

    set_clause = ", ".join(f"{col} = ?" for col in columns_to_update)
    where_clause = "id = ?"

    await db.execute(f"""
            UPDATE {name_table} SET {set_clause} WHERE {where_clause}
        """, update_values)

    await db.close()


    # ‚úÖ –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã?

    name_table = sanitize_table_name('employees')

    alone_where = (2,)

    where_clause = "id = ?"

    await db.execute(f"DELETE FROM {name_table} WHERE {where_clause}", alone_where)

    await db.close()



asyncio.run(employer_exemple())


# üéØ –í—ã–≤–æ–¥
# ‚úî –°–æ–∑–¥–∞—ë—à—å —Ç–∞–±–ª–∏—Ü—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∫–æ–ª–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ execute().
# ‚úî –í—Å—Ç–∞–≤–ª—è–µ—à—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ execute() –∏–ª–∏ execute_many().
# ‚úî –ß–∏—Ç–∞–µ—à—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ fetchone() –∏–ª–∏ fetchall().
# ‚úî –ò—Å–ø–æ–ª—å–∑—É–µ—à—å update –∏ delete –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π.
#
# üî• –¢–µ–ø–µ—Ä—å AsyncSQLite –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö! üöÄ



# from fastapi import FastAPI
#
# async def fast_api_main():
#
#     app = FastAPI()
#     db = SQLite("database.db")
#
#     @app.on_event("startup")
#     async def startup():
#         await db.connect()
#         await db.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)")
#
#     @app.on_event("shutdown")
#     async def shutdown():
#         await db.close()
#
#     @app.post("/users/")
#     async def create_user(name: str):
#         await db.execute("INSERT INTO users (name) VALUES (?)", (name,))
#         return {"message": "User added"}
#
#     @app.get("/users/")
#     async def get_users():
#         users = await db.fetchall("SELECT * FROM users")
#         return [dict(user) for user in users]



# asyncio.run(fast_api_main())

